library(caret)
getModelInfo()
getModelInfo()$names
getModelInfo()
getModelInfo
getModelInfo()
library(AppliedPredictiveModeling)
data("segmentationOriginal")
library(caret)
View(segmentationOriginal)
length(segmentationOriginal)
Rows(segmentationOriginal)
dim(segmentationOriginal)
segmentationOriginal[which(segmentationOriginal$Case == 'Test')]
which(segmentationOriginal$Case == 'Test')
which(segmentationOriginal$Case == 'Train')
training <- segmentationOriginal[which(segmentationOriginal$Case == 'Train'),]
testing <- segmentationOriginal[which(segmentationOriginal$Case == 'Test'),]
dim(training)
dim(testing)
dim(testing) + dim(training)
dim(segmentationOriginal)
set.seed(125)
inTrain <- createDataPartition(y = segmentationOriginal$Case, p=0.6, list = FALSE)
training1 <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[-inTrain, ]
modFit <- train(Case ~ ., method="rpart", data = training)
training <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[-inTrain, ]
modFit <- train(Case ~ ., method="rpart", data = training)
modFit$finalModel
predict(modFit, data.frame(TotalIntech - 23,000))
predict(modFit, data.frame(TotalIntech = 23,000))
predict(modFit, data.frame(testing$TotalIntech = 23,000))
modFit <- train(class ~ ., method="rpart", data = training)
modFit <- train(Class ~ ., method="rpart", data = training)
modFit$finalModel
training <- segmentationOriginal[which(segmentationOriginal$Case == 'Train'),]
testing <- segmentationOriginal[which(segmentationOriginal$Case == 'Test'),]
inTrain <- createDataPartition(y = segmentationOriginal$Case, p=0.6, list = FALSE)
testing1 <- segmentationOriginal[-inTrain, ]
training11 <- segmentationOriginal[inTrain, ]
modFit <- train(Class ~ ., method="rpart", data = training)
modFit1 <- train(Class ~ ., method="rpart", data = training1)
modFit$finalModel
modFit1$finalModel
fancyPlot(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
fancyRpartPlot(modFit1$finalModel)
install.packages("pgmm")
library(pgmm)
install.packages("rpart")
install.packages("rpart")
library(rpart)
data(olive)
View(olive)
olive1 <- olive[,-1]
View(olive1)
View(olive)
View(olive1)
olive <- olive[,-1]
dim(olive)
View(olive)
modFitOlive <- train(Area ~ ., method="ct", data = olive)
newdata <- as.data.frame(t(colMeans(olive)))
modFitOlive <- train(Area ~ ., method="rpart", data = olive)
predict(moFitOlive, newdata)
predict(modFitOlive, newdata)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
View(trainSA)
fitglm <- train(chd ~ age + alcolhol + obesity + tobacco + typea + ldl, method = "glm", data = trainSA)
fitglm <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", data = trainSA)
fitglm <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial", data = trainSA)
fitglm <- train(factor(chd) ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial", data = trainSA)
fitglm$finalModel
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA,predict(fitglm,testSA))
missClass(trainSA$chd,predict(fitglm,trainSA))
predict(fitGLM, newdata = testSA)
predict(fitglm, newdata = testSA)
predict(fitglm, newdata = trainSA)
missClass(trainSA,predict(fitglm, newdata = trainSA))
fitglm <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial", data = trainSA)
predict(fitglm, newdata = testSA)
missClass(trainSA,predict(fitglm, newdata = trainSA))
missClass(trainSA,predict(fitglm, newdata = testSA))
missClass(trainSA$chd,predict(fitglm, newdata = testSA))
missClass(trainSA$chd,predict(fitglm, newdata = trainSA))
missClass(testSA$chd,predict(fitglm, newdata = testSA))
data("vowel.train")
data("vowel.test")
View(vowel.test)
vowel.test$y <- factor(vowel.test$y)
vowel.train$y <- factor(vowel.train$y)
set.seed(33833)
varImp(vowel.train)
modrf <- train(y ~ ., method = "rf", data = vowel.train)
modrf
modrf$finalModel
varImp(modrf)
library(ElemStatLearn)
data("vowel.train")
data("vowel.test")
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
modrf <- train(y ~ ., method = "rf", data = vowel.train)
modboost <- train(y ~ ., method = "gbm", data = vowel.train)
modrf
modboost
modboost$finalModel
modrf$finalModel
predict(modfr,vowel.test)
predict(modfr$y,vowel.test)
predict(modrf,vowel.test)
confusionMatrix(vowel.test, predict(modrf,vowel.test))
confusionMatrix(vowel.test$y, predict(modrf,vowel.test))
confusionMatrix(testing$diagnosis, predict(fit2, testing))
confusionMatrix(training, predict(fit1, testing))
confusionMatrix(training$diagnosis, predict(fit1, testing))
confusionMatrix(vowel.test$y, predict(modrf,vowel.test))
confusionMatrix(predict(modrf,vowel.test), vowel.test$y)
data("vowel.test")
data("vowel.train")
str(vowel.train)
vowel.train$y <- factor(vowel.train$y)
str(vowel.train)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
modrf <- train(y ~ ., method = "rf", data = vowel.train)
modboost <- train(y ~ ., method = "gbm", data = vowel.train)
predrf <- predict(modrf, vowel.test)
predboost <- predict(modboost, vowel.test)
confusionMatrix(predrf, vowel.test$y)
confusionMatrix(predrf, vowel.test$y)$overall
confusionMatrix(predrf, vowel.test$y)$overall[1]
confusionMatrix(predboost, vowel.test$y)$overall[1]
modrf <- train(y ~ ., method = "rf", data = vowel.train, preProcess="pca")
predrf <- predict(modrf, vowel.test)
confusionMatrix(predrf, vowel.test$y)$overall[1]
modrf <- train(y ~ ., method = "rf", data = vowel.train)
predrf <- predict(modrf, vowel.test)
predrf$y
predrf
vovel.test$y
vowel.test$y
rr <- rbind(predrf,vowel.test)
rr
rr <- rbind(predrf,vowel.test$y)
rr
rr <- cbind(predrf,vowel.test$y)
rr
rr$z < rr[0,]
rr$z < rr[0]
rr$z <- rr[0]
rr$z <- rr[0,]
rr$z <- rr[,1]
rr$z <- rr[,0]
rr[,1]
rr[]
rr
rr
View(rr)
rr
test$y
vowel.test$y
as.Integer(vowel.test$y)
as.integer(vowel.test$y)
rr <- cbind(predrf,as.integer(vowel.test$y)
)
rr
View(rr)
rr[,1]
rr[,0]
rr$z <- rr[,2] - rr[,1]
rr
View rr
View(rr)
rr <- cbind(predrf,as.integer(vowel.test$y))
str(rr)
rr
str(rr)
rr[,1]
rr[,2]
rr[2] - rr[,2]
rr[2] - rr[,1]
rrr$z <- rr[2] - rr[,1]
rrr[2]
rrr[2,]
rr[2]
rr[,2]
rr[,1] - rr[,2]
dif <- rr[,1] - rr[,2]
dif
dif == 0
dif[dif == 0,]
dif[dif == 0]
len(dif)
length(dif)
length(dif[dif == 0])
(282/462)*100
282/462
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
fit1 <- train(diagnosis ~ ., method = "rf", data = training)
fit2 <- train(diagnosis ~ ., method = "gbm", data = training)
fit3 <- train(diagnosis ~ ., method = "lda", data = training)
fit3
predrf <- predict(fit1, testing)
predgbm <- predict(fit2, testing)
predlda <- predict(fit3, testing)
predStacked <- data.frame(predrf, predgbm, predlda, diagnosis = tesging$diagnosis)
predStacked <- data.frame(predrf, predgbm, predlda, diagnosis = testing$diagnosis)
combFit <- train(diagnosis ~ ., method = "rf", data = predStacked)
combPred <- predict(combFit, testing$diagnosis)
confusionMatrix(combPred, testing$diagnosis)$overall
confusionMatrix(fit1, testing$diagnosis)$overall
confusionMatrix(predict(fit1, testing$diagnosis), testing$diagnosis)$overall
predict(fit1, testing$diagnosis)
fit1
confusionMatrix(predfit, testing$diagnosis)$overall
confusionMatrix(predrf, testing$diagnosis)$overall
confusionMatrix(predgbm, testing$diagnosis)$overall
confusionMatrix(predlda, testing$diagnosis)$overall
confusionMatrix(combPred, testing$diagnosis)$overall
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
View(training)
lassoFit <- train(CompressiveStrength ~ ., method = "lasso", data = training)
lassoFit <- train(CompressiveStrength ~ ., method = "lasso", data = training)
lassoFit$finalModel
?plop.enet
library(plop)
install.package("plop")
install.packages("plop")
?plop.enet
library(pgmm)
library(rpart)
library(gbm)
library(lubridate)
library(forecast)
library(e1071)
?plop.enet
??plop.enet
library(elasticnet)
??plop.enet
?plop.enet
plop.enet(lassoFit$finalModel, xvar="penalty", use.color = TRUE)
install.packages("elasticnet")
install.packages("elasticnet")
getwd()
dat = read.csv("~/Desktop/gaData.csv")
dat = read.csv("gaData.csv")
View(dat)
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
View(tstrain)
fit <- bats(tstrain)
fit <- forecats::bats(tstrain)
install.packages("forecast")
library(forecast)
fit <- bats(tstrain)
install.packages("forecast",
repos = c("http://rstudio.org/_packages",
"http://cran.rstudio.com"))
library(forecast)
version
install.packages("installr");
library(installr)
updateR()
bats
library(forecast)
library(lubridate)
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
modfcast <- bats(tstrain)
modfcast
tstrain
View(training)
dim(testing)
dim(testing)[1]
fcast <- forecast(modfcast, level = 95, h = dim(testing)[1])
fcast
summary(fcast)
str(fcast)
set.seed(3523)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
library(caret)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[ -inTrain,]
set.seed(325)
library(e1071)
modsvm <- svm(CompressiveStrength ~., data = training)
predsvm <- predict(modsvm, testing)
confusionMatrix(predsvm, testing$CompressiveStrength)
confusionMatrix(predsvm, testing)
accuracy(predsvm, testing$CompressiveStrength)
library(e1071)
library(e1071)
library(caret)
library(lattice)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library(caret)
install.packages("stringi")
library(caret)
set.seed(3523)
library(e1071)
data(concrete)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library(e1071)
modsvm <- svm(CompressiveStrength ~., data = training)
predsvm <- predict(modsvm, testing)
predsvm
dim(predsvm)
View(predsvm)
accuracy(predsvm, testing$CompressiveStrength)
library(pgmm)
accuracy(predsvm, testing$CompressiveStrength)
library(rpart)
accuracy(predsvm, testing$CompressiveStrength)
library(forecast)
install.packages("forecast")
library(forecast)
library(forecast)
install.packages("forecast")
library(forecast)
install.packages("xts")
library(forecast)
install.packages("TTR")
library(forecast)
accuracy(predsvm, testing$CompressiveStrength)
setwd("C:/Temp/Education/coursera/RegressionModels")
getwd
getwd()
list.files()
setwd("C:/Temp/Education/coursera/MachineLearning")
list.files()
training <- read.csv("pml-training.csv")
dim(training)
View(training)
training <- read.csv("pml-training.csv", na.strings = c("NA"))
dim(training)
View(training)
training <- read.csv("pml-training.csv", na.strings = c("NA","#DIV/0!"))
View(training)
testing <- read.csv("pml-testing.csv", na.strings = c("NA","#DIV/0!"))
View(testing)
dim(training)
dim(testing)
names(training)
training[,classe]
training[classe,]
training[,c("classe")]
unique(training[,c("classe")])
testing[,c("classe")]
unique(training[,c("classe")])
testing[,c("problem_id")]
dim(testing)
dim(training)
nearz <- nearZeroVar(training)
nearz
nearz <- nearZeroVar(training, saveMetrics = TRUE)
nearz
testing1 <- testing[, nearz$nzv == FALSE]
dim(testing1)
view(testing1)
View(testing1)
dim(testing)
modrf <- train(classe ~ ., method = "rf", data = testing1)
names(training1)
training1 <- training[, nearz$nzv == FALSE]
modrf <- train(classe ~ ., method = "rf", data = training1)
View(training1)
names(training1)
names(training1)
modrf <- train(classe ~ ., method = "rf", data = training1)
modrf <- train(factor(classe) ~ ., method = "rf", data = training1)
training1[,c("classe")]
unique(training1[,c("classe")])
st(training1)
str(training1)
str(training1)$str
str(training1)$classe
t <- str(training1)
t
t
names(training1)
training1[,c("classe")]
View(training1[,c("classe")])
View(training1)
training2 <- trainin1[,-c(1)]
training2 <- training1[,-c(1)]
View(training2)
names(training2)
modrf <- train(classe ~ ., method = "rf", data = training2)
current_good <- complete.cases(training2)
current_good
training_good <- training2[current_good,]
dim(training_good)
View(training_good)
modrf <- train(classe ~ ., method = "rf", data = training_good)
modrf
training <- read.csv("pml-training.csv", na.strings = c("NA","#DIV/0!"), header = TRUE)
training
View(training)
is.na(training)
view(is.na(training))
View(is.na(training))
mean(is.na(training))
colMeans(is.na(training))
View(colMeans(is.na(training)))
colMeans(is.na(training)) > 0.7
training1 <- training[, colMeans(is.na(training)) > 0.7]
dim(training1)
View(training1)
training1 <- training[, -colMeans(is.na(training)) > 0.7]
dim(training1)
colMeans(!is.na(training)) > 0.7
training1 <- training[, !colMeans(is.na(training)) > 0.7]
dim(training1)
View(training1)
current_good <- complete.cases(training1)
training_good <- training[current_good,]
dim(training_good
)
training_good <- training1[current_good,]
dim(training_good)
nearz <- nearZeroVar(training_good, saveMetrics = TRUE)
training_good <- training_good[, nearz$nzv == FALSE]
dim(training_good)
dim(training_good)
str(training_good)
modrf
modrf <- train(classe ~ ., method = "rf", data = training_good)
train_good_new <- training_good[,-c("X","username","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","num_window")]
train_good_new <- training_good[,-c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","num_window")]
training_good[,c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","num_window")]
training_good[,-c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","num_window")]
training_good[,c(-"X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","num_window")]
training_good[,!c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","num_window")]
training_good[,c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","num_window")]
training_good[,names(training_good) %in% c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","num_window")]
training_good[,!names(training_good) %in% c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","num_window"))]
training_good[,!(names(training_good) %in% c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","num_window"))]
training_good_1 <- training_good[,!(names(training_good) %in% c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","num_window"))]
dim(training_good_1)
View(training_good_1)
modrf <- train(classe ~ ., method = "rf", data = training_good_1)
varImp(modrf)
inTrain <- createDataPartition(training$classe, p=0.6, list = FALSE)
inTrain <- createDataPartition(training_goodf_1$classe, p=0.6, list = FALSE)
inTrain <- createDataPartition(training_good_1$classe, p=0.6, list = FALSE)
trainTraining <- training_good_1[inTrain, ]
testTraining <- training_good_1[-inTrain, ]
modrfTrain <- train(classe ~ ., method = "rf", data = trainTraining)
library(parallel)
library(doParallel)
library(iterators)
library(doParallel)
cluster <- makeCluster(detectCores() - 1)
registerDoParallel(cluster)
fitControl <- trainControl(method = "cv", number = 10, allowParallel = TRUE)
modrfTrain <- train(classe ~ ., method = "rf", data = trainTraining, trControl = fitControl)
library(devtools)
devtools::install_github('topepo/caret/pkg/caret')
library(devtools)
devtools::install_github('topepo/caret/pkg/caret')
library(caret)
modrfTrain <- train(classe ~ ., method = "rf", data = trainTraining, trControl = fitControl)
stopCluster(cluster)
registerDoSEQ()
modrfTrain
varImp(modrfTrain)
pred1 <- predict(modrfTrain,testTraining)
pred1
